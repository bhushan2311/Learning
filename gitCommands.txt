************* gitbash *************
---- to check who made changes your intro is required ----
**SETUP**

git config --global user.name <enter_name>
git config --global user.email <enter_email>

---- to check your name email ----

git config --global user.name 
git config --global user.email 

---- to open ide (vscode)----
code .

---- initialize existing directory as git repository --
git init

---- show modified files in working directory, staged for your next commit ----
git status 	

---- add a file as it looks now to your next commit(stage) ----
git add [file]	

git add -A	// to add all files in staging area

---- create new file in vs code current location ----
touch [filename]

---- commit your staged content as a new commit snapshot ----
git commit -m "[descreptive message]" 

// NOTE: you cant commit if you dont add a file in staging area(git add <filename>)

---- move to last commit (undo likewise) ----
// after making changes in x, you dont want that changes in x and want your previous x as it is then use checkout 
git checkout <filename>	OR git restore <filename>
git checkout -f	  // for all files

Note: Once you commit new changes it won't move to last commit(won't undo)

---------- show all commits in the current branch's history ----------
git log
git log -p -3		// -3 means show all previous 3 commits

---------- Compares working directory(tree) to the staging area ----------
git diff		// it shows nothing if (working directory(tree) = Staging area)

---------- Compares staging area with last commit ----------
git diff --staged	// it shows nothing if (Staging area = last commit)

---------- commit without adding to staging area ----------
git commit -a -m "any message"

---------- showing/listing all files ----------
ls		// feature of unix

---------- to remove file from (git repo)staging area in other words it becomes untracked file ----------
git rm --cached <filename>		// NOTE: but it present in filesystem

---------- to delete file from git repo and filesystem ----------
git rm <filename>

// Note: if file getting not delete by above command and getting error: 
	the following file has changes staged in the index:
        waste.html
(use --cached to keep the file, or -f to force removal)  then use below command
git rm -f <filename>

---------- Short status -> git status -s ---------------	// 35:35 harry video
col 1: modified in staging area	(green M)
col 2: modified in working tree (Red M)


-------------------------- .gitignore ----------------------
//Track only imp(relevent) file and ignore irrelevant files

# files inside .gitignore won't be track
suppose file inside .gitignore is 'mylogs.log' then 'mylogs' file will get ignore even if it presents inside some another folder

# *.cpp -> adding * means it will ignore all .cpp files

# <folder_name>/ -> to ignore the whole folder just add / after folder name inside .gitignore file 

# /<file_name> -> # ignore that mylogs where .gitignore file is present (same folder)
# suppose mylogs.log and .gitignore is in same folder then by adding '/' before filename, then file will get ignore
# NOTE: it will not ignore mylogs inside another folder.